// Generated by dart2js (NullSafetyMode.sound, deferred-serialization, csp), the Dart to JavaScript compiler version: 2.18.0-271.7.beta.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return null;
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$as(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$as(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, null, $length);
      return A.RangeError$value(index, _s5_);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message);
              return A.saveStackTrace(ex, new A.NullError(t1 + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              A._asString(message);
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(new A._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found."));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    throwLateFieldNI(fieldName) {
      return A.throwExpression(A.LateError$fieldNI(fieldName));
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."));
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this._value = null;
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object);
      return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _schedulePriorityAsyncCallback(callback) {
      var newEntry, lastCallback, entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        newEntry = new A._AsyncCallbackEntry(callback);
        lastCallback = $._lastCallback;
        if (lastCallback == null) {
          $._nextCallback = $._lastCallback = newEntry;
          if (!$._isInCallbackLoop)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
        } else
          $._lastCallback = lastCallback.next = newEntry;
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._CustomHashMap_closure($K);
      return new A._CustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._keys = t1;
      _._offset = 0;
      _._current = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    JsonCodec: function JsonCodec() {
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    int_parse(source) {
      var value = A.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$of(elements, growable, $E) {
      var t1 = A.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$a(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$a(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    StackTrace_current() {
      var stackTrace, exception;
      if (A.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    EnumByName_byName(_this, $name, $T) {
      var _i, value;
      for (_i = 0; _i < 5; ++_i) {
        value = _this[_i];
        if (value._name === $name)
          return value;
      }
      throw A.wrapException(A.ArgumentError$value($name, "name", "No enum value with that name"));
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message) {
      return new A.ArgumentError(false, null, null, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source) {
      return new A.FormatException(message, source);
    },
    Object_hash(object1, object2, object3, object4, object5, object6, object7, object8, object9, object10, object11) {
      var t1, t2;
      if (B.C_SentinelValue === object3) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      if (B.C_SentinelValue === object5) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      }
      if (B.C_SentinelValue === object6) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5));
      }
      if (B.C_SentinelValue === object7) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6));
      }
      if (B.C_SentinelValue === object8) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7));
      }
      if (B.C_SentinelValue === object9) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        object8 = J.get$hashCode$(object8);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7), object8));
      }
      if (B.C_SentinelValue === object10) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        object8 = J.get$hashCode$(object8);
        object9 = J.get$hashCode$(object9);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7), object8), object9));
      }
      if (B.C_SentinelValue === object11) {
        t1 = object1.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        object4 = J.get$hashCode$(object4);
        object5 = J.get$hashCode$(object5);
        object6 = J.get$hashCode$(object6);
        object7 = J.get$hashCode$(object7);
        object8 = J.get$hashCode$(object8);
        object9 = J.get$hashCode$(object9);
        object10 = J.get$hashCode$(object10);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4), object5), object6), object7), object8), object9), object10));
      }
      t1 = object1.get$hashCode(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object5 = J.get$hashCode$(object5);
      object6 = J.get$hashCode$(object6);
      object7 = J.get$hashCode$(object7);
      object8 = J.get$hashCode$(object8);
      object9 = J.get$hashCode$(object9);
      object10 = J.get$hashCode$(object10);
      object11 = J.get$hashCode$(object11);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3), object4), object5), object6), object7), object8), object9), object10), object11));
    },
    print(object) {
      A.printString(object);
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    DomException: function DomException() {
    },
    _JSRandom: function _JSRandom() {
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IterableEquality: function IterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    ListEquality: function ListEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality(t0, t1, t2) {
      this._keyEquality = t0;
      this._valueEquality = t1;
      this.$ti = t2;
    },
    DeepCollectionEquality: function DeepCollectionEquality() {
    },
    LineSetting$fromJson(json) {
      var t2,
        t1 = json.$index(0, "maxSelect");
      t1 = A._asInt(t1 == null ? -1 : t1);
      t2 = json.$index(0, "alwaysVisible");
      A._asBool(t2 == null ? true : t2);
      A._asIntQ(json.$index(0, "backgroundColor"));
      A._asStringQ(json.$index(0, "backgroundImageString"));
      t2 = J.JSArray_JSArray$growable(0, type$.GenerableParserAndPosition);
      t1 = new A.LineSetting(t1, new A._$_ChoiceStatus(B.SelectableStatus_1, true), t2);
      t1.LineSetting$fromJson$1(json);
      return t1;
    },
    LineSetting: function LineSetting(t0, t1, t2) {
      var _ = this;
      _.maxSelect = t0;
      _.choiceStatus = t1;
      _.currentPos = 0;
      _.width = 12;
      _.children = t2;
      _.parent = null;
      _.__GenerableParserAndPosition_recursiveStatus_A = $;
    },
    LineSetting$fromJson_closure: function LineSetting$fromJson_closure(t0) {
      this.$this = t0;
    },
    LineSetting$fromJson_closure0: function LineSetting$fromJson_closure0() {
    },
    ChoiceNode$fromJson(json) {
      var t2, t3, t4, t5, t6,
        _s14_ = "choiceNodeMode",
        t1 = json.$index(0, "isCard");
      A._asBool(t1 == null ? true : t1);
      t1 = json.$index(0, "isRound");
      A._asBool(t1 == null ? true : t1);
      t1 = json.$index(0, "isOccupySpace");
      A._asBool(t1 == null ? true : t1);
      t1 = json.$index(0, "maximizingImage");
      A._asBool(t1 == null ? false : t1);
      t1 = json.$index(0, "maximumStatus");
      t1 = A._asInt(t1 == null ? 0 : t1);
      t2 = json.$index(0, "imagePosition");
      A._asInt(t2 == null ? 0 : t2);
      t2 = json.$index(0, "title");
      t2 = A._asString(t2 == null ? "" : t2);
      t3 = A._asString(json.$index(0, "contentsString"));
      t4 = json.$index(0, "imageString");
      t4 = A._asString(t4 == null ? json.$index(0, "image") : t4);
      t5 = json.$index(0, "hideTitle");
      A._asBool(t5 == null ? false : t5);
      if (json.$index(0, _s14_) == null)
        t5 = B.ChoiceNodeMode_0;
      else {
        t5 = json.$index(0, "isSelectable");
        t5 = A._asBool(t5 == null ? true : t5) ? A.EnumByName_byName(B.List_kr3, A._asString(json.$index(0, _s14_)), type$.ChoiceNodeMode) : B.ChoiceNodeMode_3;
      }
      t6 = J.JSArray_JSArray$growable(0, type$.GenerableParserAndPosition);
      t1 = new A.ChoiceNode(t5, t2, t3, t4, t1, new A._$_ChoiceStatus(B.SelectableStatus_1, true), t6);
      t1.ChoiceNode$fromJson$1(json);
      return t1;
    },
    ChoiceNodeMode: function ChoiceNodeMode(t0) {
      this._name = t0;
    },
    ChoiceNode: function ChoiceNode(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.choiceNodeMode = t0;
      _.title = t1;
      _.contentsString = t2;
      _.imageString = t3;
      _.maximumStatus = t4;
      _.random = -1;
      _.select = 0;
      _.choiceStatus = t5;
      _.currentPos = 0;
      _.width = 12;
      _.children = t6;
      _.parent = null;
      _.__GenerableParserAndPosition_recursiveStatus_A = $;
    },
    ChoiceNode$fromJson_closure: function ChoiceNode$fromJson_closure(t0) {
      this.$this = t0;
    },
    _$identity(value, $T) {
      return $T._as(value);
    },
    __$$_ChoiceStatusCopyWithImpl$(_value, _then, $$Res) {
      return new A.__$$_ChoiceStatusCopyWithImpl(_value, new A.__$$_ChoiceStatusCopyWithImpl_closure(_then, $$Res), $$Res._eval$1("__$$_ChoiceStatusCopyWithImpl<0>"));
    },
    SelectableStatus: function SelectableStatus(t0) {
      this._name = t0;
    },
    ChoiceStatus: function ChoiceStatus() {
    },
    _$ChoiceStatus: function _$ChoiceStatus() {
    },
    _$ChoiceStatusCopyWithImpl: function _$ChoiceStatusCopyWithImpl() {
    },
    __$$_ChoiceStatusCopyWithImpl: function __$$_ChoiceStatusCopyWithImpl(t0, t1, t2) {
      this._choice_status$_value = t0;
      this._then = t1;
      this.$ti = t2;
    },
    __$$_ChoiceStatusCopyWithImpl_closure: function __$$_ChoiceStatusCopyWithImpl_closure(t0, t1) {
      this._then = t0;
      this.$$Res = t1;
    },
    _$_ChoiceStatus: function _$_ChoiceStatus(t0, t1) {
      this.status = t0;
      this.visible = t1;
    },
    _ChoiceStatus: function _ChoiceStatus() {
    },
    _ChoiceStatus_Object__$ChoiceStatus: function _ChoiceStatus_Object__$ChoiceStatus() {
    },
    GenerableParserAndPosition: function GenerableParserAndPosition() {
    },
    Pos: function Pos() {
    },
    _$Pos: function _$Pos() {
    },
    _$_Pos: function _$_Pos(t0) {
      this._data = t0;
    },
    _Pos: function _Pos() {
    },
    _Pos_Object__$Pos: function _Pos_Object__$Pos() {
    },
    _$RecursiveStatusFromJson(json) {
      var t1, t2, t3, t4;
      A._asStringQ(json.$index(0, "conditionClickableString"));
      A._asStringQ(json.$index(0, "conditionVisibleString"));
      A._asStringQ(json.$index(0, "executeCodeString"));
      t1 = type$.JSArray_String;
      t2 = new A.RecursiveStatus(A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1));
      t3 = type$.nullable_List_dynamic;
      t4 = t3._as(json.$index(0, "conditionClickableCode"));
      if (t4 == null)
        t4 = null;
      else {
        t4 = J.map$1$1$a(t4, new A._$RecursiveStatusFromJson_closure(), type$.String);
        t4 = A.List_List$of(t4, true, t4.$ti._eval$1("ListIterable.E"));
      }
      t2.set$conditionClickableCode(t4 == null ? A._setArrayType([], t1) : t4);
      t4 = t3._as(json.$index(0, "conditionVisibleCode"));
      if (t4 == null)
        t4 = null;
      else {
        t4 = J.map$1$1$a(t4, new A._$RecursiveStatusFromJson_closure0(), type$.String);
        t4 = A.List_List$of(t4, true, t4.$ti._eval$1("ListIterable.E"));
      }
      t2.set$conditionVisibleCode(t4 == null ? A._setArrayType([], t1) : t4);
      t3 = t3._as(json.$index(0, "executeCode"));
      if (t3 == null)
        t3 = null;
      else {
        t3 = J.map$1$1$a(t3, new A._$RecursiveStatusFromJson_closure1(), type$.String);
        t3 = A.List_List$of(t3, true, t3.$ti._eval$1("ListIterable.E"));
      }
      t2.set$executeCode(t3 == null ? A._setArrayType([], t1) : t3);
      return t2;
    },
    RecursiveStatus: function RecursiveStatus(t0, t1, t2) {
      this.conditionClickableCode = t0;
      this.conditionVisibleCode = t1;
      this.executeCode = t2;
    },
    _$RecursiveStatusFromJson_closure: function _$RecursiveStatusFromJson_closure() {
    },
    _$RecursiveStatusFromJson_closure0: function _$RecursiveStatusFromJson_closure0() {
    },
    _$RecursiveStatusFromJson_closure1: function _$RecursiveStatusFromJson_closure1() {
    },
    PlatformDesignSetting: function PlatformDesignSetting() {
    },
    _$PlatformDesignSetting: function _$PlatformDesignSetting() {
    },
    _$_PlatformDesignSetting: function _$_PlatformDesignSetting(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.titleOverlap = t0;
      _.titlePosition = t1;
      _.titleOutline = t2;
      _.titleFont = t3;
      _.mainFont = t4;
      _.variableFont = t5;
      _.colorBackground = t6;
      _.colorNode = t7;
      _.colorOutline = t8;
      _.colorTitle = t9;
    },
    _PlatformDesignSetting_Object__$PlatformDesignSetting: function _PlatformDesignSetting_Object__$PlatformDesignSetting() {
    },
    Analyser: function Analyser(t0, t1, t2, t3) {
      var _ = this;
      _.errorList = t0;
      _.lexicalAnalyser = t1;
      _.semanticAnalyser = t2;
      _.functionList = t3;
    },
    FunctionListEnum_getFunctionListEnum($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_A0t, new A.FunctionListEnum_getFunctionListEnum_closure($name), new A.FunctionListEnum_getFunctionListEnum_closure0($name));
    },
    FunctionListEnum: function FunctionListEnum(t0, t1, t2) {
      this.argumentLength = t0;
      this.hasMultipleArgument = t1;
      this._name = t2;
    },
    FunctionListEnum_getFunctionListEnum_closure: function FunctionListEnum_getFunctionListEnum_closure(t0) {
      this.name = t0;
    },
    FunctionListEnum_getFunctionListEnum_closure0: function FunctionListEnum_getFunctionListEnum_closure0(t0) {
      this.name = t0;
    },
    Functions: function Functions(t0, t1) {
      this.functionUnspecifiedFunction = t0;
      this.functionValueType = t1;
    },
    Functions_init_closure: function Functions_init_closure() {
    },
    Functions_init_closure0: function Functions_init_closure0() {
    },
    Functions_init_closure1: function Functions_init_closure1() {
    },
    Functions_init_closure2: function Functions_init_closure2() {
    },
    Functions_init_closure3: function Functions_init_closure3() {
    },
    Functions_init_closure4: function Functions_init_closure4() {
    },
    Functions_init_closure5: function Functions_init_closure5() {
    },
    Functions_init_closure6: function Functions_init_closure6() {
    },
    LexicalAnalyser: function LexicalAnalyser() {
    },
    SemanticAnalyser: function SemanticAnalyser() {
    },
    getValueTypeFromStringInput(input) {
      if (B.JSString_methods.startsWith$1(input, '"') && B.JSString_methods.endsWith$1(input, '"'))
        return new A.ValueType(B.JSString_methods.substring$2(input, 1, input.length - 1), B.DataType_2);
      if (input === "true" || input === "false")
        return new A.ValueType(input, B.DataType_3);
      if (A.stringContainsUnchecked(input, ".", 0)) {
        if (A.Primitives_parseDouble(input) != null)
          return new A.ValueType(input, B.DataType_1);
        return new A.ValueType(input, B.DataType_2);
      }
      if (A.Primitives_parseDouble(input) != null)
        return new A.ValueType(input, B.DataType_0);
      return new A.ValueType(input, B.DataType_2);
    },
    getValueTypeFromDynamicInput(input) {
      var t1, _s4_ = "data";
      if (type$.Map_String_dynamic._is(input))
        return A.getValueTypeFromDynamicInput(input.$index(0, _s4_));
      if (typeof input == "string") {
        if (B.JSString_methods.startsWith$1(input, "{") && B.JSString_methods.endsWith$1(input, "}")) {
          t1 = B.JSString_methods.substring$2(B.JSString_methods.trim$0(input), 0, B.JSString_methods.indexOf$1(input, ","));
          return A.getValueTypeFromDynamicInput(J.$index$as(B.C_JsonCodec.decode$2$reviver(A.stringReplaceAllUnchecked(t1 + "}", _s4_, '"data"'), null), _s4_));
        }
        return new A.ValueType(input, B.DataType_2);
      }
      if (A._isBool(input))
        return new A.ValueType(input ? "true" : "false", B.DataType_3);
      if (A._isInt(input))
        return new A.ValueType(B.JSInt_methods.toString$0(input), B.DataType_0);
      if (typeof input == "number")
        return new A.ValueType(B.JSNumber_methods.toString$0(input), B.DataType_1);
      return new A.ValueType(J.toString$0$(input), B.DataType_2);
    },
    DataType: function DataType(t0) {
      this._name = t0;
    },
    ValueType: function ValueType(t0, t1) {
      this.data = t0;
      this.type = t1;
    },
    ValueTypeWrapper: function ValueTypeWrapper(t0, t1, t2) {
      this.valueType = t0;
      this.visible = t1;
      this.displayName = t2;
    },
    main() {
      var t1, t2;
      self.loadPlatform = A.allowInterop(A.main___loadPlatformInternal$closure(), type$.void_Function_2_String_and_List_dynamic);
      t1 = type$.int_Function_List_dynamic;
      self.getSelect = A.allowInterop(A.main___getSelectInternal$closure(), t1);
      self.select = A.allowInterop(A.main___selectInternal$closure(), type$.void_Function_2_List_dynamic_and_int);
      t2 = type$.String_Function_List_dynamic;
      self.getChoiceStatus = A.allowInterop(A.main___getChoiceStatusInternal$closure(), t2);
      self.getVisible = A.allowInterop(A.main___getVisibleInternal$closure(), type$.bool_Function_List_dynamic);
      self.getSize = A.allowInterop(A.main___getSizeInternal$closure(), t1);
      self.getImage = A.allowInterop(A.main___getImageInternal$closure(), t2);
      self.getContents = A.allowInterop(A.main___getContentsInternal$closure(), t2);
      self.childLength = A.allowInterop(A.main___childLengthInternal$closure(), t1);
      self.lineLength = A.allowInterop(A.main___lineLengthInternal$closure(), type$.int_Function);
      self.getChoiceNodeMode = A.allowInterop(A.main___getChoiceNodeModeInternal$closure(), t2);
      self.updatePlatform = A.allowInterop(A.main___updatePlatformInternal$closure(), type$.void_Function);
      self.getValueList = A.allowInterop(A.main___getValueListInternal$closure(), type$.List_String_Function);
    },
    _loadPlatformInternal(jsonPlatform, jsonLine) {
      var t1, t2, line, t3;
      A._asString(jsonPlatform);
      type$.List_dynamic._as(jsonLine);
      t1 = type$.Map_String_dynamic;
      $.__platform._value = A.PlayablePlatform$fromJson(t1._as(B.C_JsonCodec.decode$2$reviver(jsonPlatform, null)));
      for (t2 = J.get$iterator$a(jsonLine); t2.moveNext$0();) {
        line = t2.get$current();
        t3 = $.__platform._value;
        if (t3 == $.__platform)
          A.throwExpression(A.LateError$fieldNI($.__platform.__late_helper$_name));
        B.JSArray_methods.add$1(t3.lineSettings, A.LineSetting$fromJson(t1._as(B.C_JsonCodec.decode$2$reviver(A._asString(line), null))));
      }
      $.__platform._readField$0().updateStatusAll$0();
    },
    _getSelectInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        node = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos)),
        t1 = node == null ? null : node.select;
      return t1 == null ? 0 : t1;
    },
    _selectInternal(pos, n) {
      var innerPos, t1, t2;
      type$.List_dynamic._as(pos);
      A._asInt(n);
      if (!$.isProcessing) {
        innerPos = A.listToPos(pos);
        t1 = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos));
        if (t1 != null)
          if (t1.choiceNodeMode === B.ChoiceNodeMode_2) {
            t2 = t1.select += n;
            t1.set$select(B.JSInt_methods.clamp$2(t2, 0, t1.maximumStatus));
          } else {
            t1.random = -1;
            t1.select = t1.select === 1 ? 0 : 1;
          }
        $.isProcessing = true;
        A.Timer_Timer(new A.Duration(100), new A._selectInternal_closure());
      }
    },
    _getChoiceStatusInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = $.__platform._readField$0().getGenerableParserAndPosition$1(innerPos);
      t1 = t1 == null ? null : t1.choiceStatus.status._name;
      return t1 == null ? "" : t1;
    },
    _getVisibleInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = $.__platform._readField$0().getGenerableParserAndPosition$1(innerPos);
      t1 = t1 == null ? null : t1.choiceStatus.visible;
      return t1 !== false;
    },
    _getSizeInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos));
      t1 = t1 == null ? null : t1.getMaxSize$1(true);
      return t1 == null ? 12 : t1;
    },
    _getContentsInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos));
      t1 = t1 == null ? null : t1.contentsString;
      return t1 == null ? "" : t1;
    },
    _getImageInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos));
      t1 = t1 == null ? null : t1.imageString;
      return t1 == null ? "" : t1;
    },
    _childLengthInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = $.__platform._readField$0().getNode$1(innerPos);
      t1 = t1 == null ? null : t1.children.length;
      return t1 == null ? 0 : t1;
    },
    _lineLengthInternal() {
      return $.__platform._readField$0().lineSettings.length;
    },
    listToPos(pos) {
      var t1 = J.map$1$1$a(pos, new A.listToPos_closure(), type$.int);
      return new A._$_Pos(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
    },
    _getChoiceNodeModeInternal(pos) {
      var innerPos = A.listToPos(type$.List_dynamic._as(pos)),
        t1 = type$.nullable_ChoiceNode._as($.__platform._readField$0().getGenerableParserAndPosition$1(innerPos)),
        mod = t1 == null ? null : t1.choiceNodeMode;
      return B.JSString_methods.trim$0((mod == null ? B.ChoiceNodeMode_0 : mod)._name);
    },
    _updatePlatformInternal() {
      $.__platform._readField$0().updateStatusAll$0();
    },
    _getValueListInternal() {
      var t1, t2, t3, t4, wrapper,
        list = A._setArrayType([], type$.JSArray_String);
      for (t1 = $.$get$VariableDataBase__instance(), t2 = t1.varMapGlobal, t3 = A._instanceType(t2), t2 = new A._HashMapKeyIterator(t2, t2._computeKeys$0(), t3._eval$1("_HashMapKeyIterator<1>")), t3 = t3._precomputed1; t2.moveNext$0();) {
        t4 = t2._current;
        wrapper = t1.getValueTypeWrapper$1(t4 == null ? t3._as(t4) : t4);
        if (wrapper.visible)
          B.JSArray_methods.add$1(list, wrapper.displayName + " : " + A.S(wrapper.valueType.get$dataUnzip()));
      }
      return list;
    },
    _selectInternal_closure: function _selectInternal_closure() {
    },
    listToPos_closure: function listToPos_closure() {
    },
    PlayablePlatform$fromJson(json) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _4294967295 = 4294967295,
        _s8_ = "notoSans",
        t1 = J.JSArray_JSArray$growable(0, type$.LineSetting),
        t2 = json.$index(0, "stringImageName");
      A._asStringQ(t2 == null ? "" : t2);
      t2 = type$.Map_dynamic_dynamic._as(json.$index(0, "globalSetting")).map$2$1(0, new A.PlayablePlatform$fromJson_closure(), type$.String, type$.ValueTypeWrapper);
      t3 = A._asBoolQ(json.$index(0, "titleOverlap"));
      t4 = A._asBoolQ(json.$index(0, "titlePosition"));
      t5 = A._asBoolQ(json.$index(0, "titleOutline"));
      t6 = A._asStringQ(json.$index(0, "titleFont"));
      if (t6 == null)
        t6 = _s8_;
      t7 = A._asStringQ(json.$index(0, "mainFont"));
      if (t7 == null)
        t7 = _s8_;
      t8 = A._asStringQ(json.$index(0, "variableFont"));
      if (t8 == null)
        t8 = _s8_;
      t9 = A._asIntQ(json.$index(0, "colorBackground"));
      if (t9 == null)
        t9 = _4294967295;
      t10 = A._asIntQ(json.$index(0, "colorNode"));
      if (t10 == null)
        t10 = _4294967295;
      t11 = A._asIntQ(json.$index(0, "colorOutline"));
      if (t11 == null)
        t11 = 4282434815;
      t12 = A._asIntQ(json.$index(0, "colorTitle"));
      if (t12 == null)
        t12 = 4278190080;
      return new A.PlayablePlatform(t1, t2, new A._$_PlatformDesignSetting(t3 !== false, t4 !== false, t5 !== false, t6, t7, t8, t9, t10, t11, t12));
    },
    PlayablePlatform: function PlayablePlatform(t0, t1, t2) {
      this.lineSettings = t0;
      this.globalSetting = t1;
      this.designSetting = t2;
    },
    PlayablePlatform$fromJson_closure: function PlayablePlatform$fromJson_closure() {
    },
    VariableDataBase: function VariableDataBase(t0, t1) {
      this.varMapGlobal = t0;
      this.varMapLocal = t1;
    },
    EqualUnmodifiableListView: function EqualUnmodifiableListView(t0, t1, t2) {
      this._freezed_annotation$_source = t0;
      this._collection$_source = t1;
      this.$ti = t2;
    },
    Freezed: function Freezed() {
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      type$.Function._as(callback);
      return A.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = B.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$a(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ans(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$as(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$a(receiver) {
      return J.getInterceptor$a(receiver).get$iterator(receiver);
    },
    get$length$as(receiver) {
      return J.getInterceptor$as(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ans(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ans(receiver).$add(receiver, a0);
    },
    $div$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver / a0;
      return J.getInterceptor$n(receiver).$div(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $gt$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$as(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string")
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$as(receiver).$index(receiver, a0);
    },
    $lt$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver < a0;
      return J.getInterceptor$n(receiver).$lt(receiver, a0);
    },
    $mul$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $sub$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    $tdiv$n(receiver, a0) {
      return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
    },
    add$1$a(receiver, a0) {
      return J.getInterceptor$a(receiver).add$1(receiver, a0);
    },
    ceil$0$n(receiver) {
      return J.getInterceptor$n(receiver).ceil$0(receiver);
    },
    elementAt$1$a(receiver, a0) {
      return J.getInterceptor$a(receiver).elementAt$1(receiver, a0);
    },
    floor$0$n(receiver) {
      return J.getInterceptor$n(receiver).floor$0(receiver);
    },
    indexOf$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).indexOf$1(receiver, a0);
    },
    map$1$1$a(receiver, a0, $T1) {
      return J.getInterceptor$a(receiver).map$1$1(receiver, a0, $T1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    removeLast$0$a(receiver) {
      return J.getInterceptor$a(receiver).removeLast$0(receiver);
    },
    round$0$n(receiver) {
      return J.getInterceptor$n(receiver).round$0(receiver);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType(receiver) {
      return A.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $and(receiver, other) {
      return other && receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return B.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    }
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_8k0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    addAll$1(receiver, collection) {
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      this._addAllFromArray$1(receiver, collection);
      return;
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this.__interceptors$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current(_current) {
      this.__interceptors$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = B.JSInt_methods.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (B.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add(receiver, other) {
      A._asNum(other);
      return receiver + other;
    },
    $sub(receiver, other) {
      A._asNum(other);
      return receiver - other;
    },
    $div(receiver, other) {
      A._asNum(other);
      return receiver / other;
    },
    $mul(receiver, other) {
      A._asNum(other);
      return receiver * other;
    },
    $tdiv(receiver, other) {
      A._asNum(other);
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + A.S(other)));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt(receiver, other) {
      A._asNum(other);
      return receiver < other;
    },
    $gt(receiver, other) {
      A._asNum(other);
      return receiver > other;
    },
    get$runtimeType(receiver) {
      return B.Type_num_cv7;
    },
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return B.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return B.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add(receiver, other) {
      A._asString(other);
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$1(receiver, pattern) {
      var t1 = receiver.length,
        otherLength = pattern.length;
      if (otherLength > t1)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      A._asInt(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$1(receiver, pattern) {
      var t1 = receiver.indexOf(pattern, 0);
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return B.Type_String_k8F;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isPattern: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.__internal$_iterable,
        $length = t1.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t2 = _this.__internal$_index;
      if (t2 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t1.elementAt$1(0, t2));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$as(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$a(this._source, index));
    }
  };
  A.UnmodifiableListMixin.prototype = {};
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$as(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$as(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this.__internal$_name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[A._asString(key)];
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this.__js_helper$_keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = A._asString(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    },
    get$keys() {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__js_helper$_map.__js_helper$_keys;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_keys.length;
    }
  };
  A.Instantiation.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeType(this) === A.getRuntimeType(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeType(this), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty0;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty0;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (!(index < t1.length))
          return A.ioore(t1, index);
        list.push(t1[index]);
      }
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (!(t4 >= 0 && t4 < t2.length))
          return A.ioore(t2, t4);
        map.$indexSet(0, new A.Symbol(t3), t2[t4]);
      }
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 12
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$keys() {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    containsKey$1(key) {
      var strings = this.__js_helper$_strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 1073741823;
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 13
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 14
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 15
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 16
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 17
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 7
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 7
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._AsyncCallbackEntry.prototype = {};
  A.StreamTransformerBase.prototype = {};
  A._Zone.prototype = {};
  A._rootHandleError_closure.prototype = {
    call$0() {
      var t1 = this.error,
        t2 = this.stackTrace;
      A.checkNotNullable(t1, "error", type$.Object);
      A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
      A.Error__throw(t1, t2);
    },
    $signature: 1
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    $index(_, key) {
      return null;
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$keys() {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1(key) {
      var strings, t1;
      if (key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else {
        t1 = this._containsKey$1(key);
        return t1;
      }
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A._HashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    remove$1(_, key) {
      var t1;
      if (key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else {
        t1 = this._remove$1(key);
        return t1;
      }
    },
    _remove$1(key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._keys = null;
        _this._collection$_length = 0;
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _addHashTableEntry$3(table, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._instanceType(this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1
  };
  A._HashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._CustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_get(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$_HashMap$_set(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_remove(key);
    },
    _computeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; i += 2)
        if (A.boolConversionCheck(t2.call$2(bucket[i], t1._as(key))))
          return i;
      return -1;
    }
  };
  A._CustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 18
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_current(null);
        return false;
      } else {
        _this.set$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.UnmodifiableListView.prototype = {
    get$length(_) {
      return this.get$_collection$_source().length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this.get$_collection$_source();
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    get$_collection$_source() {
      return this._collection$_source;
    }
  };
  A.ListBase.prototype = {$isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), _this.$ti._eval$1("ListIterator<1>"));
    },
    elementAt$1(_, index) {
      var t1 = this.get$_collection$_source();
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    get$first(_) {
      var t1;
      if (this.get$_collection$_source().length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = this.get$_collection$_source();
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      return t1[0];
    },
    map$1$1(_, f, $T) {
      var t1 = this.$ti;
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 19
  };
  A.MapMixin.prototype = {
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapMixin.K,MapMixin.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    containsKey$1(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    $index(_, key) {
      return this._map.$index(0, key);
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$keys() {
      var t1 = this._map;
      return new A.LinkedHashMapKeyIterable(t1, t1.$ti._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._map);
    },
    map$2$1(_, transform, K2, V2) {
      return this._map.map$2$1(0, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A._ListBase_Object_ListMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._convert$_data.__js_helper$_length : this._convert$_computeKeys$0().length;
    },
    get$keys() {
      if (this._processed == null) {
        var t1 = this._convert$_data;
        return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (!(index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._parent.containsKey$1(key);
    }
  };
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.JsonCodec.prototype = {
    decode$2$reviver(source, reviver) {
      var t1;
      type$.nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object._as(reviver);
      t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonDecoder.prototype = {};
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 20
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    toString$0(_) {
      var minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000);
      microseconds %= 3600000000;
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return "" + Math.abs(hours) + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    }
  };
  A._Enum.prototype = {$isEnum: 1};
  A.Error.prototype = {};
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.invalidValue);
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        source = this.source;
      if (typeof source == "string") {
        if (source.length > 78)
          source = B.JSString_methods.substring$2(source, 0, 75) + "...";
        return report + "\n" + source;
      } else
        return report;
    }
  };
  A.Iterable.prototype = {
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + this.key + ": " + this.value.toString$0(0) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType(_) {
      return A.getRuntimeType(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.DomException.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextBool$0() {
      return Math.random() < 0.5;
    }
  };
  A.DefaultEquality.prototype = {$isEquality: 1};
  A.IterableEquality.prototype = {
    equals$2(elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti._eval$1("Iterable<1>?");
      t1._as(elements1);
      t1._as(elements2);
      if (elements1 === elements2)
        return true;
      it1 = J.get$iterator$a(elements1);
      it2 = J.get$iterator$a(elements2);
      for (t1 = this._elementEquality; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!t1.equals$2(it1.get$current(), it2.get$current()))
          return false;
      }
    },
    hash$1(elements) {
      var t1, t2, hash;
      this.$ti._eval$1("Iterable<1>?")._as(elements);
      for (t1 = J.get$iterator$a(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();) {
        hash = hash + t2.hash$1(t1.get$current()) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A.ListEquality.prototype = {
    equals$2(list1, list2) {
      var $length, t2, t3, i,
        t1 = this.$ti._eval$1("List<1>?");
      t1._as(list1);
      t1._as(list2);
      if (list1 === list2)
        return true;
      t1 = J.getInterceptor$as(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$as(list2);
      if ($length !== t2.get$length(list2))
        return false;
      for (t3 = this._elementEquality, i = 0; i < $length; ++i)
        if (!t3.equals$2(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1(list) {
      var t1, t2, hash, i;
      this.$ti._eval$1("List<1>?")._as(list);
      for (t1 = J.getInterceptor$as(list), t2 = this._elementEquality, hash = 0, i = 0; i < t1.get$length(list); ++i) {
        hash = hash + t2.hash$1(t1.$index(list, i)) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A._MapEntry.prototype = {
    get$hashCode(_) {
      var t1 = this.equality;
      return 3 * t1._keyEquality.hash$1(this.key) + 7 * t1._valueEquality.hash$1(this.value) & 2147483647;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A._MapEntry) {
        t1 = this.equality;
        t1 = t1._keyEquality.equals$2(this.key, other.key) && t1._valueEquality.equals$2(this.value, other.value);
      } else
        t1 = false;
      return t1;
    }
  };
  A.MapEquality.prototype = {
    equals$2(map1, map2) {
      var equalElementCounts, key, entry, count,
        t1 = this.$ti._eval$1("Map<1,2>?");
      t1._as(map1);
      t1._as(map2);
      if (map1 === map2)
        return true;
      if (map1.get$length(map1) !== map2.get$length(map2))
        return false;
      equalElementCounts = A.HashMap_HashMap(null, null, null, type$._MapEntry, type$.int);
      for (t1 = map1.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map1.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = map2.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map2.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1(map) {
      var t2, t3, t4, hash, key, keyHash, t5,
        t1 = this.$ti;
      t1._eval$1("Map<1,2>?")._as(map);
      for (t2 = map.get$keys(), t2 = t2.get$iterator(t2), t3 = this._keyEquality, t4 = this._valueEquality, t1 = t1._rest[1], hash = 0; t2.moveNext$0();) {
        key = t2.get$current();
        keyHash = t3.hash$1(key);
        t5 = map.$index(0, key);
        hash = hash + 3 * keyHash + 7 * t4.hash$1(t5 == null ? t1._as(t5) : t5) & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A.DeepCollectionEquality.prototype = {
    equals$2(e1, e2) {
      var _this = this,
        t1 = type$.Map_dynamic_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).equals$2(e1, e2);
      t1 = type$.List_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.ListEquality(_this, type$.ListEquality_dynamic).equals$2(e1, e2);
      t1 = type$.Iterable_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && A.boolConversionCheck(new A.IterableEquality(_this, type$.IterableEquality_dynamic).equals$2(e1, e2));
      return J.$eq$(e1, e2);
    },
    hash$1(o) {
      var _this = this;
      if (type$.Map_dynamic_dynamic._is(o))
        return new A.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).hash$1(o);
      if (type$.List_dynamic._is(o))
        return new A.ListEquality(_this, type$.ListEquality_dynamic).hash$1(o);
      if (type$.Iterable_dynamic._is(o))
        return new A.IterableEquality(_this, type$.IterableEquality_dynamic).hash$1(o);
      return J.get$hashCode$(o);
    },
    $isEquality: 1
  };
  A.LineSetting.prototype = {
    LineSetting$fromJson$1(json) {
      var _this = this,
        _s8_ = "children",
        _s19_ = "optimizedLengthList",
        t1 = json.$index(0, "y");
      _this.currentPos = A._asInt(t1 == null ? json.$index(0, "pos") : t1);
      if (json.containsKey$1(_s8_)) {
        t1 = J.map$1$1$a(type$.List_dynamic._as(json.$index(0, _s8_)), new A.LineSetting$fromJson_closure(_this), type$.ChoiceNode);
        _this.set$children(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
      }
      _this.__GenerableParserAndPosition_recursiveStatus_A = A._$RecursiveStatusFromJson(json);
      if (json.containsKey$1(_s19_)) {
        t1 = J.map$1$1$a(type$.List_dynamic._as(json.$index(0, _s19_)), new A.LineSetting$fromJson_closure0(), type$.int);
        _this.set$optimizedLengthList(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
      }
    },
    initValueTypeWrapper$0() {
      var t1, trim, t2, _i, _this = this;
      if (_this.maxSelect > 0)
        $.$get$VariableDataBase__instance().setValue$3$isGlobal("lineSetting_" + _this.currentPos, new A.ValueTypeWrapper(new A.ValueType(B.JSInt_methods.toString$0(0), B.DataType_0), false, ""), true);
      else {
        t1 = $.$get$VariableDataBase__instance();
        trim = B.JSString_methods.trim$0("lineSetting_" + _this.currentPos);
        t2 = t1.varMapLocal;
        if (t2.containsKey$1(trim))
          t2.remove$1(0, trim);
        else
          t1.varMapGlobal.remove$1(0, trim);
        t1.updateVariableTiles$0();
      }
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].initValueTypeWrapper$0();
    },
    checkClickable$2($parent, onlyWorkLine) {
      var t1, t2, _i, child, t3, t4;
      for (t1 = this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t3 = $.$get$Analyser__instance();
        t4 = this.__GenerableParserAndPosition_recursiveStatus_A;
        t4 === $ && A.throwLateFieldNI("recursiveStatus");
        t4 = t3.run$2$pos(t4.conditionClickableCode, this.get$errorName());
        child.checkClickable$2(t4 !== false, true);
      }
    },
    execute$0() {
      var t1, t2, t3, _i, node, t4, t5, t6, _this = this;
      for (t1 = _this.children, t2 = t1.length, t3 = type$.EqualUnmodifiableListView_int, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        node = t1[_i];
        node.execute$0();
        if (node.isExecutable$0() && node.get$isSelectableMode()) {
          t4 = $.$get$Analyser__instance();
          t5 = _this.__GenerableParserAndPosition_recursiveStatus_A;
          t5 === $ && A.throwLateFieldNI("recursiveStatus");
          t5 = t5.executeCode;
          t6 = _this.get$pos()._data;
          t4.run$2$pos(t5, A.IterableBase_iterableToFullString(new A.EqualUnmodifiableListView(t6, t6, t3), "[", "]") + " " + ("lineSetting_" + _this.currentPos));
        }
      }
    },
    get$errorName() {
      var t1 = this.get$pos()._data;
      return A.IterableBase_iterableToFullString(new A.EqualUnmodifiableListView(t1, t1, type$.EqualUnmodifiableListView_int), "[", "]") + " " + ("lineSetting_" + this.currentPos);
    },
    set$optimizedLengthList(optimizedLengthList) {
      type$.List_int._as(optimizedLengthList);
    }
  };
  A.LineSetting$fromJson_closure.prototype = {
    call$1(e) {
      var t1 = A.ChoiceNode$fromJson(type$.Map_String_dynamic._as(e));
      t1.parent = this.$this;
      return t1;
    },
    $signature: 8
  };
  A.LineSetting$fromJson_closure0.prototype = {
    call$1(e) {
      return A._asInt(e);
    },
    $signature: 9
  };
  A.ChoiceNodeMode.prototype = {
    toString$0(_) {
      return "ChoiceNodeMode." + this._name;
    }
  };
  A.ChoiceNode.prototype = {
    get$isSelectableMode() {
      var t1 = this.choiceNodeMode;
      return t1 !== B.ChoiceNodeMode_3 && t1 !== B.ChoiceNodeMode_4;
    },
    ChoiceNode$fromJson$1(json) {
      var _this = this,
        _s8_ = "children",
        t1 = json.$index(0, "width");
      _this.width = A._asInt(t1 == null ? 2 : t1);
      t1 = json.$index(0, "x");
      _this.currentPos = A._asInt(t1 == null ? json.$index(0, "pos") : t1);
      _this.__GenerableParserAndPosition_recursiveStatus_A = A._$RecursiveStatusFromJson(json);
      if (json.containsKey$1(_s8_)) {
        t1 = J.map$1$1$a(type$.List_dynamic._as(json.$index(0, _s8_)), new A.ChoiceNode$fromJson_closure(_this), type$.ChoiceNode);
        _this.set$children(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
      }
    },
    isExecutable$0() {
      return this.select > 0;
    },
    initValueTypeWrapper$0() {
      var t2, _i, _this = this,
        titleWhitespaceRemoved = A.stringReplaceAllUnchecked(_this.title, " ", ""),
        t1 = $.$get$VariableDataBase__instance();
      t1.setValue$3$isGlobal(titleWhitespaceRemoved, new A.ValueTypeWrapper(new A.ValueType(_this.select > 0 ? "true" : "false", B.DataType_3), false, ""), true);
      t2 = _this.choiceNodeMode;
      if (t2 === B.ChoiceNodeMode_1)
        t1.setValue$3$isGlobal(titleWhitespaceRemoved + ":random", new A.ValueTypeWrapper(new A.ValueType(B.JSInt_methods.toString$0(_this.random), B.DataType_0), false, ""), true);
      if (t2 === B.ChoiceNodeMode_2)
        t1.setValue$3$isGlobal(titleWhitespaceRemoved + ":multi", new A.ValueTypeWrapper(new A.ValueType(B.JSInt_methods.toString$0(_this.select), B.DataType_0), false, ""), true);
      if (_this.isClickable$0())
        _this.set$choiceStatus(_this.choiceStatus.copyWith$1$status(B.SelectableStatus_1));
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].initValueTypeWrapper$0();
    },
    getMaxSize$1(containSelf) {
      var out, nodeParent = this;
      while (true) {
        if (!true) {
          out = 0;
          break;
        }
        c$0:
          if (nodeParent instanceof A.ChoiceNode) {
            out = nodeParent.width;
            if (out === 0) {
              nodeParent = nodeParent.parent;
              break c$0;
            } else
              break;
          } else {
            out = 12;
            break;
          }
      }
      return out;
    },
    analyseVisibleCode$0() {
      if (this.choiceNodeMode === B.ChoiceNodeMode_4)
        return false;
      return this.super$GenerableParserAndPosition$analyseVisibleCode();
    },
    isClickable$0() {
      if (this.choiceNodeMode === B.ChoiceNodeMode_4)
        return false;
      return this.super$GenerableParserAndPosition$isClickable();
    },
    execute$0() {
      var t1, t2, t3, _i, _this = this;
      if (_this.select > 0 || _this.choiceNodeMode === B.ChoiceNodeMode_4) {
        t1 = $.$get$Analyser__instance();
        t2 = _this.__GenerableParserAndPosition_recursiveStatus_A;
        t2 === $ && A.throwLateFieldNI("recursiveStatus");
        t2 = t2.executeCode;
        t3 = _this.get$pos()._data;
        t1.run$2$pos(t2, A.IterableBase_iterableToFullString(new A.EqualUnmodifiableListView(t3, t3, type$.EqualUnmodifiableListView_int), "[", "]") + " " + _this.title);
        for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].execute$0();
      }
    },
    get$errorName() {
      var t1 = this.get$pos()._data;
      return A.IterableBase_iterableToFullString(new A.EqualUnmodifiableListView(t1, t1, type$.EqualUnmodifiableListView_int), "[", "]") + " " + this.title;
    },
    set$select(select) {
      this.select = A._asInt(select);
    }
  };
  A.ChoiceNode$fromJson_closure.prototype = {
    call$1(e) {
      var t1 = A.ChoiceNode$fromJson(type$.Map_String_dynamic._as(e));
      t1.parent = this.$this;
      return t1;
    },
    $signature: 8
  };
  A.SelectableStatus.prototype = {
    toString$0(_) {
      return "SelectableStatus." + this._name;
    }
  };
  A.ChoiceStatus.prototype = {};
  A._$ChoiceStatus.prototype = {};
  A._$ChoiceStatusCopyWithImpl.prototype = {
    call$2$status$visible($status, visible) {
      var _this = this,
        t1 = type$._$_ChoiceStatus,
        t2 = t1._as(_this._choice_status$_value),
        t3 = J.$eq$($status, B.C_Freezed) ? t1._as(_this._choice_status$_value).status : type$.SelectableStatus._as($status);
      return _this._then.call$1(t2.copyWith$2$status$visible(t3, J.$eq$(visible, B.C_Freezed) ? t1._as(_this._choice_status$_value).visible : A._asBool(visible)));
    },
    call$0() {
      return this.call$2$status$visible(B.C_Freezed, B.C_Freezed);
    },
    call$1$visible(visible) {
      return this.call$2$status$visible(B.C_Freezed, visible);
    },
    call$1$status($status) {
      return this.call$2$status$visible($status, B.C_Freezed);
    }
  };
  A.__$$_ChoiceStatusCopyWithImpl.prototype = {
    call$2$status$visible($status, visible) {
      var t1 = J.$eq$($status, B.C_Freezed) ? type$._$_ChoiceStatus._as(this._choice_status$_value).status : type$.SelectableStatus._as($status),
        t2 = J.$eq$(visible, B.C_Freezed) ? type$._$_ChoiceStatus._as(this._choice_status$_value).visible : A._asBool(visible);
      return this._then.call$1(new A._$_ChoiceStatus(t1, t2));
    },
    call$0() {
      return this.call$2$status$visible(B.C_Freezed, B.C_Freezed);
    },
    call$1$visible(visible) {
      return this.call$2$status$visible(B.C_Freezed, visible);
    },
    call$1$status($status) {
      return this.call$2$status$visible($status, B.C_Freezed);
    }
  };
  A.__$$_ChoiceStatusCopyWithImpl_closure.prototype = {
    call$1(v) {
      return this._then.call$1(type$.ChoiceStatus._as(v));
    },
    $signature() {
      return this.$$Res._eval$1("0(ChoiceStatus)");
    }
  };
  A._$_ChoiceStatus.prototype = {
    toString$0(_) {
      return "ChoiceStatus(status: " + this.status.toString$0(0) + ", visible: " + this.visible + ")";
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = J.get$runtimeType$(other) === A.getRuntimeType(_this) && other instanceof A._$_ChoiceStatus && B.C_DeepCollectionEquality.equals$2(other.status, _this.status) && B.C_DeepCollectionEquality.equals$2(other.visible, _this.visible);
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeType(this), B.C_DeepCollectionEquality.hash$1(this.status), B.C_DeepCollectionEquality.hash$1(this.visible), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    },
    get$copyWith() {
      return A.__$$_ChoiceStatusCopyWithImpl$(this, B.CONSTANT, type$._$_ChoiceStatus);
    },
    copyWith$1$visible(arg0) {
      return this.get$copyWith().call$1$visible(arg0);
    },
    copyWith$1$status(arg0) {
      return this.get$copyWith().call$1$status(arg0);
    },
    copyWith$2$status$visible(arg0, arg1) {
      return this.get$copyWith().call$2$status$visible(arg0, arg1);
    }
  };
  A._ChoiceStatus.prototype = {};
  A._ChoiceStatus_Object__$ChoiceStatus.prototype = {};
  A.GenerableParserAndPosition.prototype = {
    get$isSelectableMode() {
      return true;
    },
    isExecutable$0() {
      return true;
    },
    execute$0() {
      var t1, t2, _i, _this = this;
      if (_this.isExecutable$0()) {
        t1 = $.$get$Analyser__instance();
        t2 = _this.__GenerableParserAndPosition_recursiveStatus_A;
        t2 === $ && A.throwLateFieldNI("recursiveStatus");
        t1.run$2$pos(t2.executeCode, _this.get$errorName());
        for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].execute$0();
      }
    },
    analyseVisibleCode$0() {
      var t1 = $.$get$Analyser__instance(),
        t2 = this.__GenerableParserAndPosition_recursiveStatus_A;
      t2 === $ && A.throwLateFieldNI("recursiveStatus");
      t2 = t1.run$2$pos(t2.conditionVisibleCode, this.get$errorName());
      return t2 !== false;
    },
    checkVisible$1($parent) {
      var t2, _i, _this = this,
        t1 = _this.choiceStatus;
      if (!$parent)
        _this.set$choiceStatus(t1.copyWith$1$visible(false));
      else
        _this.set$choiceStatus(t1.copyWith$1$visible(_this.analyseVisibleCode$0()));
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].checkVisible$1(_this.choiceStatus.visible);
    },
    isClickable$0() {
      var t1 = $.$get$Analyser__instance(),
        t2 = this.__GenerableParserAndPosition_recursiveStatus_A;
      t2 === $ && A.throwLateFieldNI("recursiveStatus");
      t2 = t1.run$2$pos(t2.conditionClickableCode, this.get$errorName());
      return t2 !== false;
    },
    checkClickable$2($parent, onlyWorkLine) {
      var t1, selectable, t2, _i, _this = this;
      if (!onlyWorkLine && !$parent) {
        t1 = _this.choiceStatus;
        _this.set$choiceStatus(t1.copyWith$1$status(_this.analyseVisibleCode$0() ? B.SelectableStatus_2 : B.SelectableStatus_0));
      } else {
        selectable = _this.isClickable$0();
        if (_this.get$isSelectableMode())
          if (!_this.isExecutable$0() && _this.choiceStatus.status !== B.SelectableStatus_0) {
            selectable = B.JSBool_methods.$and(selectable, $parent);
            t1 = _this.choiceStatus;
            _this.set$choiceStatus(t1.copyWith$1$status(selectable ? B.SelectableStatus_1 : B.SelectableStatus_2));
          }
      }
      for (t1 = _this.children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].checkClickable$2(_this.isExecutable$0(), false);
    },
    get$pos() {
      var t2,
        t1 = this.parent,
        posList = t1 == null ? null : t1.get$pos();
      if (posList == null)
        posList = new A._$_Pos(B.List_empty);
      t1 = this.currentPos;
      t2 = posList._data;
      t2 = A.List_List$of(new A.EqualUnmodifiableListView(t2, t2, type$.EqualUnmodifiableListView_int), true, type$.int);
      t2.push(t1);
      return new A._$_Pos(t2);
    },
    get$errorName() {
      var t1 = this.get$pos()._data;
      return "Pos(data: " + new A.EqualUnmodifiableListView(t1, t1, type$.EqualUnmodifiableListView_int).toString$0(0) + ")";
    },
    set$choiceStatus(choiceStatus) {
      this.choiceStatus = type$.ChoiceStatus._as(choiceStatus);
    },
    set$children(children) {
      this.children = type$.List_GenerableParserAndPosition._as(children);
    }
  };
  A.Pos.prototype = {
    get$length(_) {
      var t1 = this._data;
      return new A.EqualUnmodifiableListView(t1, t1, type$.EqualUnmodifiableListView_int).get$_collection$_source().length;
    }
  };
  A._$Pos.prototype = {};
  A._$_Pos.prototype = {
    toString$0(_) {
      var t1 = this._data;
      return "Pos(data: " + new A.EqualUnmodifiableListView(t1, t1, type$.EqualUnmodifiableListView_int).toString$0(0) + ")";
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = J.get$runtimeType$(other) === A.getRuntimeType(this) && other instanceof A._$_Pos && B.C_DeepCollectionEquality.equals$2(other._data, this._data);
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeType(this), B.C_DeepCollectionEquality.hash$1(this._data), B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A._Pos.prototype = {};
  A._Pos_Object__$Pos.prototype = {};
  A.RecursiveStatus.prototype = {
    set$conditionClickableCode(conditionClickableCode) {
      this.conditionClickableCode = type$.List_String._as(conditionClickableCode);
    },
    set$conditionVisibleCode(conditionVisibleCode) {
      this.conditionVisibleCode = type$.List_String._as(conditionVisibleCode);
    },
    set$executeCode(executeCode) {
      this.executeCode = type$.List_String._as(executeCode);
    }
  };
  A._$RecursiveStatusFromJson_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A._$RecursiveStatusFromJson_closure0.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A._$RecursiveStatusFromJson_closure1.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.PlatformDesignSetting.prototype = {};
  A._$PlatformDesignSetting.prototype = {};
  A._$_PlatformDesignSetting.prototype = {
    toString$0(_) {
      var _this = this;
      return "PlatformDesignSetting(titleOverlap: " + _this.titleOverlap + ", titlePosition: " + _this.titlePosition + ", titleOutline: " + _this.titleOutline + ", titleFont: " + _this.titleFont + ", mainFont: " + _this.mainFont + ", variableFont: " + _this.variableFont + ", colorBackground: " + _this.colorBackground + ", colorNode: " + _this.colorNode + ", colorOutline: " + _this.colorOutline + ", colorTitle: " + _this.colorTitle + ")";
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = J.get$runtimeType$(other) === A.getRuntimeType(_this) && other instanceof A._$_PlatformDesignSetting && B.C_DeepCollectionEquality.equals$2(other.titleOverlap, _this.titleOverlap) && B.C_DeepCollectionEquality.equals$2(other.titlePosition, _this.titlePosition) && B.C_DeepCollectionEquality.equals$2(other.titleOutline, _this.titleOutline) && B.C_DeepCollectionEquality.equals$2(other.titleFont, _this.titleFont) && B.C_DeepCollectionEquality.equals$2(other.mainFont, _this.mainFont) && B.C_DeepCollectionEquality.equals$2(other.variableFont, _this.variableFont) && B.C_DeepCollectionEquality.equals$2(other.colorBackground, _this.colorBackground) && B.C_DeepCollectionEquality.equals$2(other.colorNode, _this.colorNode) && B.C_DeepCollectionEquality.equals$2(other.colorOutline, _this.colorOutline) && B.C_DeepCollectionEquality.equals$2(other.colorTitle, _this.colorTitle);
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(A.getRuntimeType(_this), B.C_DeepCollectionEquality.hash$1(_this.titleOverlap), B.C_DeepCollectionEquality.hash$1(_this.titlePosition), B.C_DeepCollectionEquality.hash$1(_this.titleOutline), B.C_DeepCollectionEquality.hash$1(_this.titleFont), B.C_DeepCollectionEquality.hash$1(_this.mainFont), B.C_DeepCollectionEquality.hash$1(_this.variableFont), B.C_DeepCollectionEquality.hash$1(_this.colorBackground), B.C_DeepCollectionEquality.hash$1(_this.colorNode), B.C_DeepCollectionEquality.hash$1(_this.colorOutline), B.C_DeepCollectionEquality.hash$1(_this.colorTitle));
    },
    $isPlatformDesignSetting: 1
  };
  A._PlatformDesignSetting_Object__$PlatformDesignSetting.prototype = {};
  A.Analyser.prototype = {
    run$2$pos(unitList, pos) {
      var stack, line, code, spaceIndex, opCode, argument, out, funcEnum, func, argCount, argumentList, i, out0, e, stackTrace, t1, t2, t3, t4, t5, t6, t7, argument0, func0, exception, _null = null;
      type$.List_String._as(unitList);
      if (unitList.length === 0)
        return _null;
      try {
        t1 = type$.JSArray_ValueType;
        stack = A._setArrayType([], t1);
        line = 0;
        t2 = type$.nullable_ValueType;
        t3 = this.functionList;
        t4 = type$.FunctionListEnum;
        t5 = t3.functionUnspecifiedFunction;
        t3 = t3.functionValueType;
        while (true) {
          t6 = line;
          t7 = unitList.length;
          if (typeof t6 !== "number")
            return t6.$lt();
          if (!(t6 < t7))
            break;
          c$0: {
            code = B.JSArray_methods.$index(unitList, line);
            spaceIndex = J.indexOf$1$s(code, " ");
            spaceIndex = J.$eq$(spaceIndex, -1) ? J.get$length$as(code) : spaceIndex;
            opCode = J.substring$2$s(code, 0, spaceIndex);
            t6 = spaceIndex;
            t7 = J.get$length$as(code);
            if (typeof t6 !== "number")
              return t6.$lt();
            if (t6 < t7) {
              t6 = spaceIndex;
              if (typeof t6 !== "number")
                return t6.$add();
              argument0 = J.substring$2$s(code, t6 + 1, J.get$length$as(code));
            } else
              argument0 = _null;
            argument = argument0;
            if (J.$eq$(opCode, "push")) {
              t6 = argument;
              t6.toString;
              J.add$1$a(stack, A.getValueTypeFromStringInput(t6));
            } else if (J.$eq$(opCode, "return")) {
              out = J.removeLast$0$a(stack).get$dataUnzip();
              t1 = A._asBool(out);
              return t1;
            } else if (J.$eq$(opCode, "if_goto"))
              if (A._asBool(J.removeLast$0$a(stack).get$dataUnzip()))
                break c$0;
              else {
                t6 = line;
                t7 = argument;
                t7.toString;
                t7 = A.int_parse(t7);
                if (typeof t6 !== "number")
                  return t6.$add();
                line = t6 + t7;
              }
            else if (J.$eq$(opCode, "goto")) {
              t6 = line;
              t7 = argument;
              t7.toString;
              t7 = A.int_parse(t7);
              if (typeof t6 !== "number")
                return t6.$add();
              line = t6 + t7;
            } else {
              funcEnum = A.FunctionListEnum_getFunctionListEnum(opCode);
              t6 = t4._as(funcEnum);
              func0 = t5.$index(0, t6);
              func = func0 == null ? t3.$index(0, t6) : func0;
              if (func == null) {
                t1 = pos + ", " + A.S(opCode) + " is not a function";
                t2 = type$.StackTrace._as(A.StackTrace_current());
                t3 = this.errorList;
                if (!B.JSArray_methods.contains$1(t3, t1)) {
                  A.printString(t1 + " " + t2.toString$0(0));
                  B.JSArray_methods.add$1(t3, t1);
                }
                return _null;
              }
              argCount = funcEnum.argumentLength;
              if (argument != null && funcEnum.hasMultipleArgument)
                argCount = A.int_parse(argument);
              argumentList = A._setArrayType([], t1);
              i = 0;
              while (true) {
                t6 = i;
                t7 = argCount;
                if (typeof t6 !== "number")
                  return t6.$lt();
                if (typeof t7 !== "number")
                  return A.iae(t7);
                if (!(t6 < t7))
                  break;
                J.add$1$a(argumentList, J.removeLast$0$a(stack));
                t6 = i;
                if (typeof t6 !== "number")
                  return t6.$add();
                i = t6 + 1;
              }
              t6 = argumentList;
              t7 = A.instanceType(t6)._eval$1("ReversedListIterable<1>");
              argumentList = A.List_List$of(new A.ReversedListIterable(t6, t7), true, t7._eval$1("ListIterable.E"));
              out0 = t2._as(func.call$1(argumentList));
              if (out0 != null)
                J.add$1$a(stack, out0);
            }
          }
          t6 = line;
          if (typeof t6 !== "number")
            return t6.$add();
          line = t6 + 1;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        this.addError$2(pos + ", " + A.S(e), stackTrace);
      }
      return _null;
    },
    addError$2(str, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = this.errorList;
      if (!B.JSArray_methods.contains$1(t1, str)) {
        A.print(str + " " + stackTrace.toString$0(0));
        B.JSArray_methods.add$1(t1, str);
      }
    }
  };
  A.FunctionListEnum.prototype = {
    toString$0(_) {
      return "FunctionListEnum." + this._name;
    }
  };
  A.FunctionListEnum_getFunctionListEnum_closure.prototype = {
    call$1(element) {
      return type$.FunctionListEnum._as(element)._name === this.name;
    },
    $signature: 21
  };
  A.FunctionListEnum_getFunctionListEnum_closure0.prototype = {
    call$0() {
      A.print(this.name);
      return B.FunctionListEnum_0_false_none;
    },
    $signature: 22
  };
  A.Functions.prototype = {
    init$0() {
      var _this = this,
        t1 = _this.functionUnspecifiedFunction;
      t1.$indexSet(0, B.FunctionListEnum_2_false_plus, _this.get$funcPlus());
      t1.$indexSet(0, B.FunctionListEnum_2_false_minus, _this.get$funcMinus());
      t1.$indexSet(0, B.FunctionListEnum_2_false_mul, _this.get$funcMulti());
      t1.$indexSet(0, B.FunctionListEnum_2_false_div, _this.get$funcDiv());
      t1.$indexSet(0, B.FunctionListEnum_2_false_equal, _this.get$funcEqual());
      t1.$indexSet(0, B.FunctionListEnum_2_false_notEqual, _this.get$funcNotEqual());
      t1.$indexSet(0, B.FunctionListEnum_2_false_bigger, _this.get$funcBigger());
      t1.$indexSet(0, B.FunctionListEnum_2_false_smaller, _this.get$funcSmaller());
      t1.$indexSet(0, B.FunctionListEnum_2_false_biggerEqual, _this.get$funcBiggerEqual());
      t1.$indexSet(0, B.FunctionListEnum_2_false_smallerEqual, _this.get$funcSmallerEqual());
      t1 = _this.functionValueType;
      t1.$indexSet(0, B.FunctionListEnum_1_false_floor, _this.get$funcFloor());
      t1.$indexSet(0, B.FunctionListEnum_1_false_round, _this.get$funcRound());
      t1.$indexSet(0, B.FunctionListEnum_1_false_ceil, _this.get$funcCeil());
      t1.$indexSet(0, B.FunctionListEnum_2_true_and, _this.get$funcAnd());
      t1.$indexSet(0, B.FunctionListEnum_2_true_or, _this.get$funcOr());
      t1.$indexSet(0, B.FunctionListEnum_1_false_not, _this.get$funcNot());
      t1.$indexSet(0, B.FunctionListEnum_1_false_random, _this.get$funcRandom());
      t1.$indexSet(0, B.FunctionListEnum_1_false_exist, new A.Functions_init_closure());
      t1.$indexSet(0, B.FunctionListEnum_1_false_isVisible, new A.Functions_init_closure0());
      t1.$indexSet(0, B.FunctionListEnum_1_false_loadVariable, new A.Functions_init_closure1());
      t1.$indexSet(0, B.FunctionListEnum_1_false_returnCondition, new A.Functions_init_closure2());
      t1.$indexSet(0, B.FunctionListEnum_2_false_setLocal, new A.Functions_init_closure3());
      t1.$indexSet(0, B.FunctionListEnum_2_false_setGlobal, new A.Functions_init_closure4());
      t1.$indexSet(0, B.FunctionListEnum_2_false_setVariable, new A.Functions_init_closure5());
      t1.$indexSet(0, B.FunctionListEnum_2_false_setVisible, new A.Functions_init_closure6());
    },
    funcFloor$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1)
        return new A.ValueType(B.JSInt_methods.toString$0(J.floor$0$n(t1.$index(input, 0).get$dataUnzip())), B.DataType_0);
      return B.ValueType_BmO;
    },
    funcRound$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1)
        return new A.ValueType(B.JSInt_methods.toString$0(J.round$0$n(t1.$index(input, 0).get$dataUnzip())), B.DataType_0);
      return B.ValueType_BmO;
    },
    funcCeil$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1)
        return new A.ValueType(B.JSInt_methods.toString$0(J.ceil$0$n(t1.$index(input, 0).get$dataUnzip())), B.DataType_0);
      return B.ValueType_BmO;
    },
    funcPlus$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_0 && t1.$index(input, 1).type === B.DataType_0)
        return new A.ValueType(B.JSInt_methods.toString$0(A._asInt(J.$add$ans(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()))), B.DataType_0);
      else {
        t2 = t1.$index(input, 0).type;
        if (t2 === B.DataType_0 || t2 === B.DataType_1) {
          t2 = t1.$index(input, 1).type;
          t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
        } else
          t2 = false;
        if (t2)
          return new A.ValueType(B.JSNumber_methods.toString$0(A._asDouble(J.$add$ans(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()))), B.DataType_1);
        else
          return new A.ValueType(t1.$index(input, 0).data + t1.$index(input, 1).data, B.DataType_2);
      }
    },
    funcMinus$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_0 && t1.$index(input, 1).type === B.DataType_0)
        return new A.ValueType(B.JSInt_methods.toString$0(A._asInt(J.$sub$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()))), B.DataType_0);
      else {
        t2 = t1.$index(input, 0).type;
        if (t2 === B.DataType_0 || t2 === B.DataType_1) {
          t2 = t1.$index(input, 1).type;
          t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
        } else
          t2 = false;
        if (t2)
          return new A.ValueType(B.JSNumber_methods.toString$0(J.$sub$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip())), B.DataType_1);
      }
      return B.ValueType_BmO;
    },
    funcMulti$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_0 && t1.$index(input, 1).type === B.DataType_0)
        return new A.ValueType(B.JSInt_methods.toString$0(A._asInt(J.$mul$ns(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()))), B.DataType_0);
      else {
        t2 = t1.$index(input, 0).type;
        if (t2 === B.DataType_0 || t2 === B.DataType_1) {
          t2 = t1.$index(input, 1).type;
          t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
        } else
          t2 = false;
        if (t2)
          return new A.ValueType(B.JSNumber_methods.toString$0(A._asDouble(J.$mul$ns(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()))), B.DataType_1);
      }
      return B.ValueType_BmO;
    },
    funcDiv$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_0 && t1.$index(input, 1).type === B.DataType_0)
        return new A.ValueType(B.JSInt_methods.toString$0(J.$tdiv$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip())), B.DataType_0);
      else {
        t2 = t1.$index(input, 0).type;
        if (t2 === B.DataType_0 || t2 === B.DataType_1) {
          t2 = t1.$index(input, 1).type;
          t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
        } else
          t2 = false;
        if (t2)
          return new A.ValueType(B.JSNumber_methods.toString$0(J.$div$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip())), B.DataType_1);
      }
      return B.ValueType_BmO;
    },
    funcEqual$1(input) {
      var t1, t2, t3;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      t3 = t1.$index(input, 1).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1)
        t2 = (t3 === B.DataType_0 || t3 === B.DataType_1) && t2 !== t3;
      else
        t2 = false;
      if (t2)
        return new A.ValueType(Math.abs(J.$sub$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip())) <= 0.000001 ? "true" : "false", B.DataType_3);
      return new A.ValueType(t1.$index(input, 0).data === t1.$index(input, 1).data ? "true" : "false", B.DataType_3);
    },
    funcNotEqual$1(input) {
      return new A.ValueType(!A._asBool(this.funcEqual$1(type$.List_ValueType._as(input)).get$dataUnzip()) ? "true" : "false", B.DataType_3);
    },
    funcBigger$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1) {
        t2 = t1.$index(input, 1).type;
        t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
      } else
        t2 = false;
      if (t2)
        return new A.ValueType(J.$gt$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()) ? "true" : "false", B.DataType_3);
      return B.ValueType_false_DataType_3;
    },
    funcSmaller$1(input) {
      var t1, t2;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      t2 = t1.$index(input, 0).type;
      if (t2 === B.DataType_0 || t2 === B.DataType_1) {
        t2 = t1.$index(input, 1).type;
        t2 = t2 === B.DataType_0 || t2 === B.DataType_1;
      } else
        t2 = false;
      if (t2)
        return new A.ValueType(J.$lt$n(t1.$index(input, 0).get$dataUnzip(), t1.$index(input, 1).get$dataUnzip()) ? "true" : "false", B.DataType_3);
      return B.ValueType_false_DataType_3;
    },
    funcBiggerEqual$1(input) {
      return new A.ValueType(!A._asBool(this.funcSmaller$1(type$.List_ValueType._as(input)).get$dataUnzip()) ? "true" : "false", B.DataType_3);
    },
    funcSmallerEqual$1(input) {
      return new A.ValueType(!A._asBool(this.funcBigger$1(type$.List_ValueType._as(input)).get$dataUnzip()) ? "true" : "false", B.DataType_3);
    },
    funcRandom$1(input) {
      var t1;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_0)
        return new A.ValueType(B.JSInt_methods.toString$0(B.C__JSRandom.nextInt$1(A._asInt(t1.$index(input, 0).get$dataUnzip()))), B.DataType_0);
      return new A.ValueType(B.C__JSRandom.nextBool$0() ? "true" : "false", B.DataType_3);
    },
    funcAnd$1(input) {
      var t1, t2;
      for (t1 = J.get$iterator$a(type$.List_ValueType._as(input)); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (!(t2.type === B.DataType_3 && A._asBool(t2.get$dataUnzip())))
          return B.ValueType_false_DataType_3;
      }
      return B.ValueType_true_DataType_3;
    },
    funcOr$1(input) {
      var t1, t2;
      for (t1 = J.get$iterator$a(type$.List_ValueType._as(input)); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2.type === B.DataType_3 && A._asBool(t2.get$dataUnzip()))
          return B.ValueType_true_DataType_3;
      }
      return B.ValueType_false_DataType_3;
    },
    funcNot$1(input) {
      var t1;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      if (t1.$index(input, 0).type === B.DataType_3)
        return new A.ValueType(!A._asBool(t1.$index(input, 0).get$dataUnzip()) ? "true" : "false", B.DataType_3);
      return B.ValueType_false_DataType_3;
    }
  };
  A.Functions_init_closure.prototype = {
    call$1(input) {
      type$.List_ValueType._as(input);
      return new A.ValueType($.$get$VariableDataBase__instance().hasValue$1(A._asString(J.$index$as(input, 0).get$dataUnzip())) ? "true" : "false", B.DataType_3);
    },
    $signature: 0
  };
  A.Functions_init_closure0.prototype = {
    call$1(input) {
      var t1;
      type$.List_ValueType._as(input);
      t1 = $.$get$VariableDataBase__instance().getValueTypeWrapper$1(A._asString(J.$index$as(input, 0).get$dataUnzip()));
      t1 = t1 == null ? null : t1.visible;
      return new A.ValueType(t1 === true ? "true" : "false", B.DataType_3);
    },
    $signature: 0
  };
  A.Functions_init_closure1.prototype = {
    call$1(input) {
      var t1;
      type$.List_ValueType._as(input);
      t1 = $.$get$VariableDataBase__instance().getValueTypeWrapper$1(B.JSString_methods.trim$0(A._asString(J.$index$as(input, 0).get$dataUnzip())));
      t1 = t1 == null ? null : t1.valueType;
      return t1 == null ? B.ValueType_BmO : t1;
    },
    $signature: 0
  };
  A.Functions_init_closure2.prototype = {
    call$1(input) {
      return J.$index$as(type$.List_ValueType._as(input), 0);
    },
    $signature: 0
  };
  A.Functions_init_closure3.prototype = {
    call$1(input) {
      var t1, varName;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      varName = A._asString(t1.$index(input, 0).get$dataUnzip());
      $.$get$VariableDataBase__instance().setValue$3$isGlobal(varName, new A.ValueTypeWrapper(t1.$index(input, 1), false, ""), false);
    },
    $signature: 2
  };
  A.Functions_init_closure4.prototype = {
    call$1(input) {
      var t1, varName;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      varName = A._asString(t1.$index(input, 0).get$dataUnzip());
      $.$get$VariableDataBase__instance().setValue$3$isGlobal(varName, new A.ValueTypeWrapper(t1.$index(input, 1), false, ""), true);
    },
    $signature: 2
  };
  A.Functions_init_closure5.prototype = {
    call$1(input) {
      var t1, varName, t2, original;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      varName = A._asString(t1.$index(input, 0).get$dataUnzip());
      t2 = $.$get$VariableDataBase__instance();
      original = t2.getValueTypeWrapper$1(varName);
      if (original != null)
        t2.setValue$2(varName, original.copyWith$1$valueType(t1.$index(input, 1)));
    },
    $signature: 2
  };
  A.Functions_init_closure6.prototype = {
    call$1(input) {
      var t1, varName, value, original;
      type$.List_ValueType._as(input);
      t1 = J.getInterceptor$as(input);
      varName = A._asString(t1.$index(input, 0).get$dataUnzip());
      value = A._asBool(t1.$index(input, 1).get$dataUnzip());
      t1 = $.$get$VariableDataBase__instance();
      original = t1.getValueTypeWrapper$1(varName);
      if (original != null)
        t1.setValue$2(varName, original.copyWith$1$visible(value));
    },
    $signature: 2
  };
  A.LexicalAnalyser.prototype = {};
  A.SemanticAnalyser.prototype = {};
  A.DataType.prototype = {
    toString$0(_) {
      return "DataType." + this._name;
    }
  };
  A.ValueType.prototype = {
    get$dataUnzip() {
      var t2,
        t1 = this.data;
      if (t1.length === 0)
        return null;
      t2 = this.type;
      if (t2 === B.DataType_0)
        return A.int_parse(t1);
      if (t2 === B.DataType_3)
        return t1 === "true";
      if (t2 === B.DataType_1)
        return A.double_parse(t1);
      return t1;
    },
    toString$0(_) {
      return this.data + " : " + this.type.toString$0(0);
    }
  };
  A.ValueTypeWrapper.prototype = {
    toString$0(_) {
      return "( " + this.valueType.toString$0(0) + " | " + this.visible + " )";
    },
    copyWith$2$valueType$visible(valueType, visible) {
      var t1 = valueType == null ? this.valueType : valueType,
        t2 = visible == null ? this.visible : visible;
      return new A.ValueTypeWrapper(t1, t2, this.displayName);
    },
    copyWith$1$visible(visible) {
      return this.copyWith$2$valueType$visible(null, visible);
    },
    copyWith$1$valueType(valueType) {
      return this.copyWith$2$valueType$visible(valueType, null);
    }
  };
  A._selectInternal_closure.prototype = {
    call$0() {
      $.isProcessing = false;
    },
    $signature: 1
  };
  A.listToPos_closure.prototype = {
    call$1(e) {
      return A._asInt(e);
    },
    $signature: 9
  };
  A.PlayablePlatform.prototype = {
    getNode$1(pos) {
      var t3,
        t1 = pos._data,
        t2 = type$.EqualUnmodifiableListView_int;
      if (new A.EqualUnmodifiableListView(t1, t1, t2).get$_collection$_source().length === 1) {
        t3 = this.lineSettings;
        t2 = new A.EqualUnmodifiableListView(t1, t1, t2);
        t2 = t2.get$first(t2);
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          return A.ioore(t3, t2);
        return t3[t2];
      }
      return type$.nullable_ChoiceNode._as(this.getGenerableParserAndPosition$1(pos));
    },
    getGenerableParserAndPosition$1(pos) {
      var child, i,
        t1 = pos._data,
        t2 = type$.EqualUnmodifiableListView_int,
        t3 = new A.EqualUnmodifiableListView(t1, t1, t2),
        t4 = this.lineSettings;
      if (t3.get$first(t3) >= t4.length)
        return null;
      t3 = new A.EqualUnmodifiableListView(t1, t1, t2);
      t3 = t3.get$first(t3);
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        return A.ioore(t4, t3);
      child = t4[t3];
      for (i = 1; i < new A.EqualUnmodifiableListView(t1, t1, t2).get$_collection$_source().length; ++i) {
        t3 = child.children.length;
        t4 = new A.EqualUnmodifiableListView(t1, t1, t2).get$_collection$_source();
        if (!(i < t4.length))
          return A.ioore(t4, i);
        t4 = t4[i];
        if (typeof t4 !== "number")
          return A.iae(t4);
        if (t3 <= t4)
          return null;
        else {
          t3 = new A.EqualUnmodifiableListView(t1, t1, t2).get$_collection$_source();
          if (!(i < t3.length))
            return A.ioore(t3, i);
          t3 = t3[i];
          if (typeof t3 !== "number")
            return t3.$lt();
          if (t3 < 0)
            return null;
        }
        t3 = child.children;
        t4 = new A.EqualUnmodifiableListView(t1, t1, t2).get$_collection$_source();
        if (!(i < t4.length))
          return A.ioore(t4, i);
        child = B.JSArray_methods.$index(t3, t4[i]);
      }
      return child;
    },
    updateStatusAll$0() {
      var t3, i, lineSetting,
        t1 = $.$get$VariableDataBase__instance(),
        t2 = t1.varMapGlobal;
      t2.clear$0(0);
      t3 = t1.varMapLocal;
      t3.clear$0(0);
      t1.updateVariableTiles$0();
      t2.addAll$1(0, this.globalSetting);
      for (t1 = this.lineSettings, i = 0; i < t1.length; ++i) {
        lineSetting = t1[i];
        lineSetting.initValueTypeWrapper$0();
        lineSetting.execute$0();
        lineSetting.checkVisible$1(true);
        lineSetting.checkClickable$2(true, true);
        if (t3._collection$_length > 0) {
          t3._strings = t3._nums = t3._collection$_rest = t3._keys = null;
          t3._collection$_length = 0;
        }
      }
    }
  };
  A.PlayablePlatform$fromJson_closure.prototype = {
    call$2(k, v) {
      var t1, t2, t3;
      A._asString(k);
      type$.Map_String_dynamic._as(v);
      t1 = A.getValueTypeFromDynamicInput(v.$index(0, "valueType"));
      t2 = v.$index(0, "visible");
      t2 = A._asBool(t2 == null ? false : t2);
      t3 = v.$index(0, "displayName");
      return new A.MapEntry(k, new A.ValueTypeWrapper(t1, t2, A._asString(t3 == null ? "" : t3)), type$.MapEntry_String_ValueTypeWrapper);
    },
    $signature: 23
  };
  A.VariableDataBase.prototype = {
    updateVariableTiles$0() {
    },
    setValue$3$isGlobal($name, value, isGlobal) {
      var t1, _this = this,
        trim = B.JSString_methods.trim$0($name);
      if (isGlobal == null) {
        t1 = _this.varMapLocal;
        if (t1.containsKey$1($name))
          t1.$indexSet(0, trim, value);
        else {
          t1 = _this.varMapGlobal;
          if (t1.containsKey$1($name))
            t1.$indexSet(0, trim, value);
        }
      } else if (isGlobal)
        _this.varMapGlobal.$indexSet(0, trim, value);
      else
        _this.varMapLocal.$indexSet(0, trim, value);
      _this.updateVariableTiles$0();
    },
    setValue$2($name, value) {
      return this.setValue$3$isGlobal($name, value, null);
    },
    hasValue$1($name) {
      var trim = B.JSString_methods.trim$0($name);
      return this.varMapLocal.containsKey$1(trim) || this.varMapGlobal.containsKey$1(trim);
    },
    getValueTypeWrapper$1($name) {
      var t1,
        trim = B.JSString_methods.trim$0($name);
      if (this.hasValue$1(trim)) {
        t1 = this.varMapLocal.$index(0, trim);
        return t1 == null ? this.varMapGlobal.$index(0, trim) : t1;
      }
      return null;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this.varMapGlobal);
    }
  };
  A.EqualUnmodifiableListView.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return this.$ti._is(other) && A.getRuntimeType(other) === A.getRuntimeType(this) && other._freezed_annotation$_source === this._freezed_annotation$_source;
    },
    get$hashCode(_) {
      return A.Object_hash(A.getRuntimeType(this), this._freezed_annotation$_source, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.Freezed.prototype = {};
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _.super$_HashMap$_remove = _._remove$1;
    _ = A.GenerableParserAndPosition.prototype;
    _.super$GenerableParserAndPosition$analyseVisibleCode = _.analyseVisibleCode$0;
    _.super$GenerableParserAndPosition$isClickable = _.isClickable$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static_2 = hunkHelpers._static_2,
      _static = hunkHelpers.installStaticTearOff,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 5);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 5);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 5);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 10);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 11);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 11);
    _static_2(A, "core__identical$closure", "identical", 10);
    _static(A, "choice_status___$identity$closure", 1, null, ["call$1$1", "call$1"], ["_$identity", function(value) {
      return A._$identity(value, type$.dynamic);
    }], 24, 0);
    var _;
    _instance_1_u(_ = A.Functions.prototype, "get$funcFloor", "funcFloor$1", 0);
    _instance_1_u(_, "get$funcRound", "funcRound$1", 0);
    _instance_1_u(_, "get$funcCeil", "funcCeil$1", 0);
    _instance_1_u(_, "get$funcPlus", "funcPlus$1", 0);
    _instance_1_u(_, "get$funcMinus", "funcMinus$1", 0);
    _instance_1_u(_, "get$funcMulti", "funcMulti$1", 0);
    _instance_1_u(_, "get$funcDiv", "funcDiv$1", 0);
    _instance_1_u(_, "get$funcEqual", "funcEqual$1", 0);
    _instance_1_u(_, "get$funcNotEqual", "funcNotEqual$1", 0);
    _instance_1_u(_, "get$funcBigger", "funcBigger$1", 0);
    _instance_1_u(_, "get$funcSmaller", "funcSmaller$1", 0);
    _instance_1_u(_, "get$funcBiggerEqual", "funcBiggerEqual$1", 0);
    _instance_1_u(_, "get$funcSmallerEqual", "funcSmallerEqual$1", 0);
    _instance_1_u(_, "get$funcRandom", "funcRandom$1", 0);
    _instance_1_u(_, "get$funcAnd", "funcAnd$1", 0);
    _instance_1_u(_, "get$funcOr", "funcOr$1", 0);
    _instance_1_u(_, "get$funcNot", "funcNot$1", 0);
    _static_2(A, "main___loadPlatformInternal$closure", "_loadPlatformInternal", 25);
    _static_1(A, "main___getSelectInternal$closure", "_getSelectInternal", 6);
    _static_2(A, "main___selectInternal$closure", "_selectInternal", 26);
    _static_1(A, "main___getChoiceStatusInternal$closure", "_getChoiceStatusInternal", 3);
    _static_1(A, "main___getVisibleInternal$closure", "_getVisibleInternal", 27);
    _static_1(A, "main___getSizeInternal$closure", "_getSizeInternal", 6);
    _static_1(A, "main___getContentsInternal$closure", "_getContentsInternal", 3);
    _static_1(A, "main___getImageInternal$closure", "_getImageInternal", 3);
    _static_1(A, "main___childLengthInternal$closure", "_childLengthInternal", 6);
    _static_0(A, "main___lineLengthInternal$closure", "_lineLengthInternal", 28);
    _static_1(A, "main___getChoiceNodeModeInternal$closure", "_getChoiceNodeModeInternal", 3);
    _static_0(A, "main___updatePlatformInternal$closure", "_updatePlatformInternal", 1);
    _static_0(A, "main___getValueListInternal$closure", "_getValueListInternal", 29);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.SentinelValue, A.Iterable, A.ListIterator, A.UnmodifiableListMixin, A._ListBase_Object_ListMixin, A.Symbol, A.MapView, A.ConstantMap, A.Closure, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A._StackTrace, A._Required, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncCallbackEntry, A.StreamTransformerBase, A._Zone, A._HashMapKeyIterator, A.ListMixin, A._UnmodifiableMapMixin, A.Codec, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.MapEntry, A.Null, A.StringBuffer, A._JSRandom, A.DefaultEquality, A.IterableEquality, A.ListEquality, A._MapEntry, A.MapEquality, A.DeepCollectionEquality, A.GenerableParserAndPosition, A._ChoiceStatus_Object__$ChoiceStatus, A._$ChoiceStatus, A._$ChoiceStatusCopyWithImpl, A._Pos_Object__$Pos, A._$Pos, A.RecursiveStatus, A._PlatformDesignSetting_Object__$PlatformDesignSetting, A._$PlatformDesignSetting, A._$_PlatformDesignSetting, A.Analyser, A.Functions, A.LexicalAnalyser, A.SemanticAnalyser, A.ValueType, A.ValueTypeWrapper, A.PlayablePlatform, A.VariableDataBase, A.Freezed]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, A.DomException]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A._ConstantMapKeyIterable]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable]);
    _inheritMany(A.ListIterable, [A.MappedListIterable, A.ReversedListIterable, A._JsonMapKeyIterable]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.Closure, [A.Closure2Args, A.Instantiation, A.Closure0Args, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._CustomHashMap_closure, A.LineSetting$fromJson_closure, A.LineSetting$fromJson_closure0, A.ChoiceNode$fromJson_closure, A.__$$_ChoiceStatusCopyWithImpl_closure, A._$RecursiveStatusFromJson_closure, A._$RecursiveStatusFromJson_closure0, A._$RecursiveStatusFromJson_closure1, A.FunctionListEnum_getFunctionListEnum_closure, A.Functions_init_closure, A.Functions_init_closure0, A.Functions_init_closure1, A.Functions_init_closure2, A.Functions_init_closure3, A.Functions_init_closure4, A.Functions_init_closure5, A.Functions_init_closure6, A.listToPos_closure]);
    _inheritMany(A.Closure2Args, [A.ConstantMap_map_closure, A.Primitives_functionNoSuchMethod_closure, A.initHooks_closure0, A._HashMap_addAll_closure, A.MapBase_mapToString_closure, A.NoSuchMethodError_toString_closure, A.PlayablePlatform$fromJson_closure]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A._JsonMap]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A.FunctionListEnum_getFunctionListEnum_closure0, A._selectInternal_closure]);
    _inherit(A._RootZone, A._Zone);
    _inheritMany(A._HashMap, [A._IdentityHashMap, A._CustomHashMap]);
    _inherit(A.UnmodifiableListView, A.UnmodifiableListBase);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inherit(A.JsonCodec, A.Codec);
    _inherit(A.JsonDecoder, A.Converter);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inheritMany(A.GenerableParserAndPosition, [A.LineSetting, A.ChoiceNode]);
    _inheritMany(A._Enum, [A.ChoiceNodeMode, A.SelectableStatus, A.FunctionListEnum, A.DataType]);
    _inherit(A.ChoiceStatus, A._ChoiceStatus_Object__$ChoiceStatus);
    _inherit(A.__$$_ChoiceStatusCopyWithImpl, A._$ChoiceStatusCopyWithImpl);
    _inherit(A._ChoiceStatus, A.ChoiceStatus);
    _inherit(A._$_ChoiceStatus, A._ChoiceStatus);
    _inherit(A.Pos, A._Pos_Object__$Pos);
    _inherit(A._Pos, A.Pos);
    _inherit(A._$_Pos, A._Pos);
    _inherit(A.PlatformDesignSetting, A._PlatformDesignSetting_Object__$PlatformDesignSetting);
    _inherit(A.EqualUnmodifiableListView, A.UnmodifiableListView);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A._ChoiceStatus_Object__$ChoiceStatus, A._$ChoiceStatus);
    _mixin(A._Pos_Object__$Pos, A._$Pos);
    _mixin(A._PlatformDesignSetting_Object__$PlatformDesignSetting, A._$PlatformDesignSetting);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["ValueType(List<ValueType>)", "~()", "Null(List<ValueType>)", "String(List<@>)", "String(@)", "~(~())", "int(List<@>)", "Null()", "ChoiceNode(@)", "int(@)", "bool(Object?,Object?)", "int(Object?)", "~(String,@)", "@(@)", "@(@,String)", "@(String)", "Null(@)", "Null(~())", "bool(@)", "~(Object?,Object?)", "~(Symbol0,@)", "bool(FunctionListEnum)", "FunctionListEnum()", "MapEntry<String,ValueTypeWrapper>(@,@)", "0^(0^)<Object?>", "~(String,List<@>)", "~(List<@>,int)", "bool(List<@>)", "int()", "List<String>()"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","JSBool":{"bool":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[]},"JSNumNotInt":{"num":[]},"JSString":{"String":[],"Pattern":[]},"LateError":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"MappedListIterable":{"ListIterable":["2"],"Iterable":["2"],"ListIterable.E":"2"},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"Iterable":["1"],"ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"Iterable":["1"]},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_HashMap":{"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"Iterable":["1"]},"UnmodifiableListView":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"Iterable":["String"],"ListIterable.E":"String"},"JsonDecoder":{"Converter":["String","Object?"]},"double":{"num":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"String":{"Pattern":[]},"_Enum":{"Enum":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"DefaultEquality":{"Equality":["1"]},"IterableEquality":{"Equality":["Iterable<1>"]},"ListEquality":{"Equality":["List<1>"]},"MapEquality":{"Equality":["Map<1,2>"]},"DeepCollectionEquality":{"Equality":["@"]},"LineSetting":{"GenerableParserAndPosition":[]},"ChoiceNodeMode":{"Enum":[]},"ChoiceNode":{"GenerableParserAndPosition":[]},"_$_ChoiceStatus":{"ChoiceStatus":[]},"SelectableStatus":{"Enum":[]},"__$$_ChoiceStatusCopyWithImpl":{"_$ChoiceStatusCopyWithImpl":["1"]},"_ChoiceStatus":{"ChoiceStatus":[]},"_$_Pos":{"Pos":[]},"_Pos":{"Pos":[]},"_$_PlatformDesignSetting":{"PlatformDesignSetting":[]},"FunctionListEnum":{"Enum":[]},"DataType":{"Enum":[]},"EqualUnmodifiableListView":{"UnmodifiableListView":["1"],"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"Iterable":["1"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"StreamTransformerBase":2,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1,"Codec":2}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      ChoiceNode: findType("ChoiceNode"),
      ChoiceNodeMode: findType("ChoiceNodeMode"),
      ChoiceStatus: findType("ChoiceStatus"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      EqualUnmodifiableListView_int: findType("EqualUnmodifiableListView<int>"),
      Error: findType("Error"),
      Function: findType("Function"),
      FunctionListEnum: findType("FunctionListEnum"),
      GenerableParserAndPosition: findType("GenerableParserAndPosition"),
      Invocation: findType("Invocation"),
      IterableEquality_dynamic: findType("IterableEquality<@>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_ValueType: findType("JSArray<ValueType>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      LineSetting: findType("LineSetting"),
      ListEquality_dynamic: findType("ListEquality<@>"),
      List_GenerableParserAndPosition: findType("List<GenerableParserAndPosition>"),
      List_String: findType("List<String>"),
      List_String_Function: findType("List<String>()"),
      List_ValueType: findType("List<ValueType>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      MapEntry_String_ValueTypeWrapper: findType("MapEntry<String,ValueTypeWrapper>"),
      MapEquality_dynamic_dynamic: findType("MapEquality<@,@>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Null: findType("Null"),
      Object: findType("Object"),
      SelectableStatus: findType("SelectableStatus"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      String_Function_List_dynamic: findType("String(List<@>)"),
      Symbol: findType("Symbol0"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      ValueTypeWrapper: findType("ValueTypeWrapper"),
      _$_ChoiceStatus: findType("_$_ChoiceStatus"),
      _MapEntry: findType("_MapEntry"),
      bool: findType("bool"),
      bool_Function_List_dynamic: findType("bool(List<@>)"),
      double: findType("double"),
      dynamic: findType("@"),
      int: findType("int"),
      int_Function: findType("int()"),
      int_Function_List_dynamic: findType("int(List<@>)"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_ChoiceNode: findType("ChoiceNode?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_Object: findType("Object?"),
      nullable_ValueType: findType("ValueType?"),
      nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object: findType("Object?(Object?,Object?)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_2_List_dynamic_and_int: findType("~(List<@>,int)"),
      void_Function_2_String_and_List_dynamic: findType("~(String,List<@>)"),
      void_Function_String_dynamic: findType("~(String,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.CONSTANT = new A.Instantiation1(A.choice_status___$identity$closure(), A.findType("Instantiation1<_$_ChoiceStatus>"));
    B.C_DefaultEquality = new A.DefaultEquality(A.findType("DefaultEquality<0&>"));
    B.C_DeepCollectionEquality = new A.DeepCollectionEquality();
    B.C_Freezed = new A.Freezed();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C__JSRandom = new A._JSRandom();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.ChoiceNodeMode_0 = new A.ChoiceNodeMode("defaultMode");
    B.ChoiceNodeMode_1 = new A.ChoiceNodeMode("randomMode");
    B.ChoiceNodeMode_2 = new A.ChoiceNodeMode("multiSelect");
    B.ChoiceNodeMode_3 = new A.ChoiceNodeMode("unSelectableMode");
    B.ChoiceNodeMode_4 = new A.ChoiceNodeMode("onlyCode");
    B.DataType_0 = new A.DataType("ints");
    B.DataType_1 = new A.DataType("doubles");
    B.DataType_2 = new A.DataType("strings");
    B.DataType_3 = new A.DataType("bools");
    B.Duration_0 = new A.Duration(0);
    B.FunctionListEnum_0_false_none = new A.FunctionListEnum(0, false, "none");
    B.FunctionListEnum_1_false_ceil = new A.FunctionListEnum(1, false, "ceil");
    B.FunctionListEnum_1_false_exist = new A.FunctionListEnum(1, false, "exist");
    B.FunctionListEnum_1_false_floor = new A.FunctionListEnum(1, false, "floor");
    B.FunctionListEnum_1_false_isVisible = new A.FunctionListEnum(1, false, "isVisible");
    B.FunctionListEnum_1_false_loadVariable = new A.FunctionListEnum(1, false, "loadVariable");
    B.FunctionListEnum_1_false_not = new A.FunctionListEnum(1, false, "not");
    B.FunctionListEnum_1_false_random = new A.FunctionListEnum(1, false, "random");
    B.FunctionListEnum_1_false_returnCondition = new A.FunctionListEnum(1, false, "returnCondition");
    B.FunctionListEnum_1_false_round = new A.FunctionListEnum(1, false, "round");
    B.FunctionListEnum_2_false_bigger = new A.FunctionListEnum(2, false, "bigger");
    B.FunctionListEnum_2_false_biggerEqual = new A.FunctionListEnum(2, false, "biggerEqual");
    B.FunctionListEnum_2_false_div = new A.FunctionListEnum(2, false, "div");
    B.FunctionListEnum_2_false_equal = new A.FunctionListEnum(2, false, "equal");
    B.FunctionListEnum_2_false_minus = new A.FunctionListEnum(2, false, "minus");
    B.FunctionListEnum_2_false_mul = new A.FunctionListEnum(2, false, "mul");
    B.FunctionListEnum_2_false_notEqual = new A.FunctionListEnum(2, false, "notEqual");
    B.FunctionListEnum_2_false_plus = new A.FunctionListEnum(2, false, "plus");
    B.FunctionListEnum_2_false_setGlobal = new A.FunctionListEnum(2, false, "setGlobal");
    B.FunctionListEnum_2_false_setLocal = new A.FunctionListEnum(2, false, "setLocal");
    B.FunctionListEnum_2_false_setVariable = new A.FunctionListEnum(2, false, "setVariable");
    B.FunctionListEnum_2_false_setVisible = new A.FunctionListEnum(2, false, "setVisible");
    B.FunctionListEnum_2_false_smaller = new A.FunctionListEnum(2, false, "smaller");
    B.FunctionListEnum_2_false_smallerEqual = new A.FunctionListEnum(2, false, "smallerEqual");
    B.FunctionListEnum_2_true_and = new A.FunctionListEnum(2, true, "and");
    B.FunctionListEnum_2_true_or = new A.FunctionListEnum(2, true, "or");
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.List_A0t = A._setArrayType(makeConstList([B.FunctionListEnum_2_false_plus, B.FunctionListEnum_2_false_minus, B.FunctionListEnum_2_false_mul, B.FunctionListEnum_2_false_div, B.FunctionListEnum_2_false_equal, B.FunctionListEnum_2_false_notEqual, B.FunctionListEnum_2_false_bigger, B.FunctionListEnum_2_false_smaller, B.FunctionListEnum_2_false_biggerEqual, B.FunctionListEnum_2_false_smallerEqual, B.FunctionListEnum_1_false_floor, B.FunctionListEnum_1_false_round, B.FunctionListEnum_1_false_ceil, B.FunctionListEnum_2_true_and, B.FunctionListEnum_2_true_or, B.FunctionListEnum_1_false_not, B.FunctionListEnum_1_false_random, B.FunctionListEnum_1_false_exist, B.FunctionListEnum_1_false_isVisible, B.FunctionListEnum_1_false_loadVariable, B.FunctionListEnum_1_false_returnCondition, B.FunctionListEnum_2_false_setLocal, B.FunctionListEnum_2_false_setGlobal, B.FunctionListEnum_2_false_setVariable, B.FunctionListEnum_2_false_setVisible, B.FunctionListEnum_0_false_none]), A.findType("JSArray<FunctionListEnum>"));
    B.List_empty = A._setArrayType(makeConstList([]), A.findType("JSArray<int>"));
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_kr3 = A._setArrayType(makeConstList([B.ChoiceNodeMode_0, B.ChoiceNodeMode_1, B.ChoiceNodeMode_2, B.ChoiceNodeMode_3, B.ChoiceNodeMode_4]), A.findType("JSArray<ChoiceNodeMode>"));
    B.List_empty1 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty1, A.findType("ConstantStringMap<Symbol0,@>"));
    B.SelectableStatus_0 = new A.SelectableStatus("hide");
    B.SelectableStatus_1 = new A.SelectableStatus("open");
    B.SelectableStatus_2 = new A.SelectableStatus("closed");
    B.Symbol_call = new A.Symbol("call");
    B.Type_JSObject_8k0 = A.typeLiteral("JSObject");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.Type_String_k8F = A.typeLiteral("String");
    B.Type_bool_lhE = A.typeLiteral("bool");
    B.Type_double_K1J = A.typeLiteral("double");
    B.Type_int_tHn = A.typeLiteral("int");
    B.Type_num_cv7 = A.typeLiteral("num");
    B.ValueType_BmO = new A.ValueType("", B.DataType_2);
    B.ValueType_false_DataType_3 = new A.ValueType("false", B.DataType_3);
    B.ValueType_true_DataType_3 = new A.ValueType("true", B.DataType_3);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.__platform = A._Cell$named("platform");
    $.isProcessing = false;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", () => new Error().stack != void 0);
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "Analyser__instance", "$get$Analyser__instance", () => {
      var t1 = A._setArrayType([], type$.JSArray_String),
        t2 = type$.FunctionListEnum;
      t2 = new A.Functions(A.LinkedHashMap_LinkedHashMap$_empty(t2, A.findType("ValueType(List<ValueType>)")), A.LinkedHashMap_LinkedHashMap$_empty(t2, A.findType("@(List<ValueType>)")));
      t2.init$0();
      return new A.Analyser(t1, new A.LexicalAnalyser(), new A.SemanticAnalyser(), t2);
    });
    _lazyFinal($, "VariableDataBase__instance", "$get$VariableDataBase__instance", () => {
      var _null = null,
        t1 = type$.String,
        t2 = type$.ValueTypeWrapper;
      return new A.VariableDataBase(A.HashMap_HashMap(_null, _null, _null, t1, t2), A.HashMap_HashMap(_null, _null, _null, t1, t2));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ApplicationCacheErrorEvent: J.JavaScriptObject, DOMError: J.JavaScriptObject, ErrorEvent: J.JavaScriptObject, Event: J.JavaScriptObject, InputEvent: J.JavaScriptObject, SubmitEvent: J.JavaScriptObject, MediaError: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, SensorErrorEvent: J.JavaScriptObject, SpeechRecognitionError: J.JavaScriptObject, DOMException: A.DomException});
    hunkHelpers.setOrUpdateLeafTags({ApplicationCacheErrorEvent: true, DOMError: true, ErrorEvent: true, Event: true, InputEvent: true, SubmitEvent: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, GeolocationPositionError: true, SensorErrorEvent: true, SpeechRecognitionError: true, DOMException: true});
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();
